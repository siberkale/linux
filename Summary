History

• Origins of UNIX (1969): Linux is inspired by UNIX, which was created at Bell Labs by Ken Thompson and Dennis Ritchie.
• Minix (1987): Andrew Tanenbaum developed Minix, a UNIX-like OS for educational purposes.
• Birth of Linux (1991): Linus Torvalds, a Finnish student, created Linux as a hobby project to improve Minix. He released the first version (0.01) in 1991.
• Open Source Community (1992-Today): Linux was released under the GNU General Public License (GPL), allowing anyone to use, modify, and distribute it freely.

------------------

Why it is so popular?

1. Open Source and Free
2. Stability and Reliability
3. Security and Privacy
4. Performance and Efficiency
5. Flexibility and Customization
6. Developer and IT Industry Adoption
7. Large and Supportive Community
8. Powering the Internet and Beyond

---------------

What is sudo? sudo (Superuser Do)

Add a user to the sudo group (Requires root access):
  sudo usermod -aG sudo username  # Ubuntu/Debian
  sudo usermod -aG wheel username  # RHEL/CentOS

------------------

1. Terminal
How to open the terminal?
Ubuntu/Linux Mint: Ctrl + Alt + T

2. Basic Commands for Navigation
pwd – Show current directory path
pwd
ls – List files and directories
ls -lA   # Detailed list including hidden files with permissions, size, owner, etc.
cd – Change directory
cd /home/user/Documents  # Move to a specific directory
cd ..                    # Move up one level
cd ~                     # Move to home directory
tree – Display directory structure (requires installation)
tree

3. File and Directory Operations
touch – Create an empty file
touch newfile.txt
mkdir – Create a new directory
mkdir secure_dir
rm – Delete files and directories
rm -rf temp_data  # Securely delete files and directories
chmod – Change file permissions
chmod 700 sensitive.txt  # Restrict access to owner only
chown – Change file ownership
sudo chown user:group file.txt  # Change owner and group

4. System Security & Monitoring Commands
Checking Active Users
who  # Shows logged-in users
Process Monitoring
ps aux | grep suspicious  # Check for unknown running processes
Network Monitoring
netstat -tulnp  # View open ports and active connections
File Integrity Checking
sha256sum important_file.txt  # Verify file integrity
System Logs
journalctl -xe  # View system logs for debugging security issues

5. Working with Text Files
nano – Simple text editor
nano file.txt  # Open file in nano editor (Ctrl + X to exit)
vim – Advanced text editor
vim file.txt  # Open file in Vim (Press "i" to insert, ESC to exit, ":wq" to save)
echo – Print text to the terminal or file
echo "Hello, Linux!"  # Print text
echo "Hello, Linux!" > file.txt  # Save text to file

6. File and Directory Permissions
ls -l – Show file permissions
ls -l file.txt
chmod – Change file permissions
chmod 644 file.txt  # Set read/write for owner, read-only for others
chmod +x script.sh  # Make script executable
chown – Change file ownership
sudo chown user:group file.txt  # Change owner and group
setfacl – Assign fine-grained permissions to files
setfacl -m u:username:rwx file.txt  # Give user full access

7. System Information and Process Management
uname -a – Show detailed system info
uname -a
whoami – Display current user
whoami
ps – List running processes
ps aux  # Detailed process list
top / htop – Monitor system processes
top  # Live process monitoring (press "q" to exit)
htop  # More interactive (requires installation)

8. Searching and Finding Files
find – Search for files and directories
find /home -name "*.txt"  # Find all .txt files in home directory
find /var/log -type f -mtime -7  # Find files modified in the last 7 days
find / -type d -name "Documents"  # Find directories named "Documents"
find /home -user username  # Find files owned by a specific user
locate – Search for files and directories with locate (needs update database)
sudo updatedb  # Update file database
locate file.txt  # Find file using locate
grep – Search inside files
grep "error" logfile.txt  # Find "error" in logfile.txt
auditctl – Monitor system events and file access
sudo auditctl -w /etc/passwd -p wa -k passwd_changes  # Track changes to /etc/passwd
which – Find location of a command
which python  # Show where Python is installed

-----------------------------------

1.1 User Accounts
Root User: The superuser with full system access (UID 0). 
Regular Users: Standard users with limited permissions (UID starting from 1000). 

1.2 Key Files
/etc/passwd: Stores user account information (username, UID, GID, home directory, shell). Each line in this file represents a user account.
/etc/shadow: Stores encrypted passwords and password-related settings. Only accessible by the root user for security reasons.
/etc/group: Stores group information (group name, GID, members). Helps manage group memberships and permissions efficiently.

1.3 Commands for User Management
useradd <username>: Create a new user with default settings.
usermod -aG <group> <username>: Add an existing user to a group.
userdel -r <username>: Delete a user and remove their home directory.
passwd <username>: Set or change a user's password.
id <username>: Display UID, GID, and group memberships of a user.
who: Display currently logged-in users.
whoami: Show the current logged-in user.
last: Show the login history of users.

2. Group Management

2.1 Groups
Primary Group: Each user has one primary group, which is assigned when the user is created. This is usually the same as the username.
Secondary Groups: Users can belong to multiple secondary groups, which provide additional permissions and access rights.

2.2 Commands for Group Management
groupadd <groupname>: Create a new group.
groupmod -n <newgroupname> <oldgroupname>: Rename an existing group.
groupdel <groupname>: Delete a group.
gpasswd -a <username> <groupname>: Add a user to a group.
gpasswd -d <username> <groupname>: Remove a user from a group.
groups <username>: List all groups a user belongs to.

3. File Permissions and Ownership

3.1 Ownership
chown <user>:<group> <file>: Change the ownership of a file.
chgrp <group> <file>: Change the group ownership of a file.
ls -l: Display file ownership and permissions.

3.2 Permissions
Linux file permissions follow the rwx (Read, Write, Execute) model and are categorized into three types:

User (u): The file owner’s permissions.
Group (g): Permissions for users in the file’s group.
Others (o): Permissions for all other users.

Changing Permissions
chmod u+x <file>: Grant execute permission to the owner.
chmod g-w <file>: Remove write permission from the group.
chmod 755 <file>: Assign permissions using numeric notation (owner: rwx, group: r-x, others: r-x).

4. Switching Users

4.1 su Command
su <username>: Switch to another user account.
su -: Switch to root user and load their environment.
exit: Return to the previous user.

4.2 sudo Command
sudo <command>: Execute a command as another user (usually root).
sudo -i: Open a root shell.
sudo visudo: Edit the /etc/sudoers file to configure sudo access.

5. Advanced User and Group Management

5.1 Managing Expiration and Account Locking
chage -l <username>: View password expiration details.
chage -M 90 <username>: Set password expiration to 90 days.
usermod -L <username>: Lock a user account.
usermod -U <username>: Unlock a user account.

5.2 Monitoring User Activity
w: Show who is logged in and their activity.
lastlog: Display the last login time of all users.
faillog -a: Show failed login attempts.

------------------------

Permission Type	Symbol	Numeric Value
Read         (r)	          4	    4
Write        (w)	          2	    2
Execute      (x)	          1    	1

644 (rw-r--r--)
Owner: Read (4) + Write (2) = 6 (rw-)
Group: Read (4) = 4 (r--)
Others: Read (4) = 4 (r--)

755 (rwxr-xr-x)
Owner: Read (4) + Write (2) + Execute (1) = 7 (rwx)
Group: Read (4) + Execute (1) = 5 (r-x)
Others: Read (4) + Execute (1) = 5 (r-x)

777 (rwxrwxrwx)
Owner: Read (4) + Write (2) + Execute (1) = 7 (rwx)
Group: Read (4) + Write (2) + Execute (1) = 7 (rwx)
Others: Read (4) + Write (2) + Execute (1) = 7 (rwx)

700 (rwx------)
Owner: Read (4) + Write (2) + Execute (1) = 7 (rwx)
Group: No permission = 0 (---)
Others: No permission = 0 (---)

------------------

Common Directories
/bin - Essential command binaries (e.g., ls, cp, mv)
/boot - Bootloader files and kernel images
/dev - Device files (e.g., /dev/sda for storage devices)
/etc - System configuration files
/home - User home directories
/lib - Shared libraries and kernel modules
/mnt - Temporary mount points for filesystems
/opt - Optional software packages
/proc - Virtual filesystem for system processes
/root - Home directory of the root user
/sbin - System binaries (e.g., fdisk, shutdown)
/tmp - Temporary files (cleared on reboot)
/usr - User utilities and applications
/var - Variable data files (e.g., logs, cache)

File Types in Linux
Regular files: Text, binary, scripts, etc.
Directories: Containers for files and subdirectories
Symbolic links: Shortcuts pointing to other files/directories
Special files: Character (c) and block (b) device files
Sockets: Used for inter-process communication
Named pipes: Used for communication between processes

-------------
scp win --> linux
dosyanın olduğu dizinde --> scp -r text.txt kullanıcıadı@ip:/tmp
----------
linux dosya derleme
gcc 39292.c --> “a.out” adında bir dosya oluştuğunu görmelisiniz. Bu c kodunuzun derlenmiş, çalıştırılabilir(binary) halidir.
./a.out --> yazmamız yeterli olacaktır. Böylece C kodumuzun çıktısını konsol üzerinde görebiliriz.
gcc 39292.c -o 39292 --> ./39292 farklı ad ile oluşturduk.
